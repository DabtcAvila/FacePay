name: Security Analysis (SAST)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'

jobs:
  # Job 1: CodeQL Analysis
  codeql:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript', 'typescript' ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: +security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{ matrix.language }}"

  # Job 2: Dependency Vulnerability Scan
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          echo "Running npm audit..."
          npm audit --audit-level moderate --json > audit-results.json || true
          
          # Check for high/critical vulnerabilities
          critical_count=$(jq '.metadata.vulnerabilities.critical // 0' audit-results.json)
          high_count=$(jq '.metadata.vulnerabilities.high // 0' audit-results.json)
          moderate_count=$(jq '.metadata.vulnerabilities.moderate // 0' audit-results.json)
          
          echo "Critical vulnerabilities: $critical_count"
          echo "High vulnerabilities: $high_count"
          echo "Moderate vulnerabilities: $moderate_count"
          
          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 0 ]; then
            echo "❌ High or critical vulnerabilities found!"
            npm audit --audit-level moderate
            exit 1
          else
            echo "✅ No critical or high vulnerabilities found"
          fi

      - name: Upload audit results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-audit-results
          path: audit-results.json

  # Job 3: Snyk Security Scan
  snyk-scan:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    if: false # Disabled by default - requires Snyk token
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: Upload Snyk results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: snyk-results
          path: snyk-results.json

  # Job 4: ESLint Security Rules
  eslint-security:
    name: ESLint Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install security plugins
        run: |
          npm install --no-save eslint-plugin-security @typescript-eslint/eslint-plugin

      - name: Create security ESLint config
        run: |
          cat > .eslintrc.security.js << 'EOF'
          module.exports = {
            extends: [
              'next/core-web-vitals',
              '@typescript-eslint/recommended'
            ],
            plugins: ['security'],
            rules: {
              'security/detect-buffer-noassert': 'error',
              'security/detect-child-process': 'warn',
              'security/detect-disable-mustache-escape': 'error',
              'security/detect-eval-with-expression': 'error',
              'security/detect-new-buffer': 'error',
              'security/detect-no-csrf-before-method-override': 'error',
              'security/detect-non-literal-fs-filename': 'warn',
              'security/detect-non-literal-regexp': 'warn',
              'security/detect-non-literal-require': 'warn',
              'security/detect-object-injection': 'warn',
              'security/detect-possible-timing-attacks': 'warn',
              'security/detect-pseudoRandomBytes': 'error',
              'security/detect-unsafe-regex': 'error'
            }
          };
          EOF

      - name: Run ESLint security scan
        run: npx eslint . --config .eslintrc.security.js --ext .ts,.tsx,.js,.jsx --format json --output-file eslint-security-results.json || true

      - name: Process security results
        run: |
          if [ -f eslint-security-results.json ]; then
            error_count=$(jq '[.[] | select(.errorCount > 0)] | length' eslint-security-results.json)
            warning_count=$(jq '[.[] | select(.warningCount > 0)] | length' eslint-security-results.json)
            
            echo "Security errors found in $error_count files"
            echo "Security warnings found in $warning_count files"
            
            if [ "$error_count" -gt 0 ]; then
              echo "❌ Security errors found!"
              jq -r '.[] | select(.errorCount > 0) | .filePath + ": " + (.messages[] | select(.severity == 2) | .message)' eslint-security-results.json
              exit 1
            else
              echo "✅ No security errors found"
            fi
          fi

      - name: Upload ESLint security results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: eslint-security-results
          path: eslint-security-results.json

  # Job 5: Secrets Detection
  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Job 6: License Compliance Check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install license checker
        run: npm install --no-save license-checker

      - name: Check licenses
        run: |
          npx license-checker --json --out licenses.json
          
          # Check for prohibited licenses
          prohibited_licenses=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.0" "LGPL-2.1" "LGPL-3.0")
          
          echo "Checking for prohibited licenses..."
          for license in "${prohibited_licenses[@]}"; do
            if jq -r '.[] | .licenses' licenses.json | grep -q "$license"; then
              echo "❌ Found prohibited license: $license"
              exit 1
            fi
          done
          
          echo "✅ No prohibited licenses found"

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  # Job 7: Docker Image Security (if applicable)
  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: false # Enable if using Docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t facepay:security-scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'facepay:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 8: Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [codeql, dependency-scan, eslint-security, secrets-scan, license-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security summary
        run: |
          echo "# Security Analysis Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Job Results" >> security-summary.md
          echo "- CodeQL Analysis: ${{ needs.codeql.result }}" >> security-summary.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-summary.md
          echo "- ESLint Security: ${{ needs.eslint-security.result }}" >> security-summary.md
          echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-summary.md
          echo "- License Check: ${{ needs.license-check.result }}" >> security-summary.md
          echo "" >> security-summary.md
          
          # Overall status
          if [[ "${{ needs.codeql.result }}" == "success" && "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.eslint-security.result }}" == "success" && "${{ needs.secrets-scan.result }}" == "success" && "${{ needs.license-check.result }}" == "success" ]]; then
            echo "## Overall Status: ✅ PASSED" >> security-summary.md
            echo "All security checks passed successfully!" >> security-summary.md
          else
            echo "## Overall Status: ❌ FAILED" >> security-summary.md
            echo "One or more security checks failed. Please review the results above." >> security-summary.md
          fi
          
          echo "" >> security-summary.md
          echo "Generated on: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> security-summary.md
          
          cat security-summary.md

      - name: Upload security summary
        uses: actions/upload-artifact@v3
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  # Job 9: Security Notification
  security-notification:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-summary]
    if: always()
    steps:
      - name: Notify Security Status
        run: |
          if [[ "${{ needs.security-summary.result }}" == "success" ]]; then
            echo "🔒 Security analysis completed successfully!"
          else
            echo "⚠️ Security analysis found issues that need attention!"
            exit 1
          fi

      # Optional: Slack security notification
      # - name: Slack Security Alert
      #   if: failure()
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: failure
      #     channel: '#security-alerts'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
      #     fields: repo,message,commit,author