'use client';

// Core types
export interface BiometricCapabilities {
  isSupported: boolean
  isPlatformAuthenticatorAvailable: boolean
  biometricTypes: ('face' | 'fingerprint' | 'voice' | 'iris' | 'unknown')[]
  biometricAvailability: {
    faceID: boolean      // iOS Face ID
    touchID: boolean     // iOS/macOS Touch ID
    windowsHello: boolean // Windows Hello
    androidFingerprint: boolean
    androidFace: boolean
  }
  deviceInfo: {
    platform: string
    isMobile: boolean
    isIOS: boolean
    isAndroid: boolean
    isMacOS: boolean
    isWindows: boolean
    osVersion?: string
  }
}

export interface WebAuthnError {
  code: string
  message: string
  isRecoverable: boolean
  suggestedAction: string
  details?: string
}

export interface WebAuthnCapabilities extends BiometricCapabilities {}

export class WebAuthnService {
  /**
   * Check browser capabilities for WebAuthn and biometric authentication
   */
  static async checkBrowserCapabilities(): Promise<WebAuthnCapabilities> {
    let isSupported = false
    let isPlatformAuthenticatorAvailable = false
    let biometricTypes: ('face' | 'fingerprint' | 'voice' | 'iris' | 'unknown')[] = []
    let isUserVerificationSupported = false

    // Check if running in browser
    if (typeof window === 'undefined' || !navigator) {
      return {
        isSupported: false,
        isPlatformAuthenticatorAvailable: false,
        biometricTypes: [],
        biometricAvailability: {
          faceID: false,
          touchID: false,
          windowsHello: false,
          androidFingerprint: false,
          androidFace: false
        },
        deviceInfo: {
          platform: 'server',
          isMobile: false,
          isIOS: false,
          isAndroid: false,
          isMacOS: false,
          isWindows: false
        }
      }
    }

    const userAgent = navigator.userAgent.toLowerCase()
    const isIOS = /iphone|ipad|ipod/.test(userAgent)
    const isAndroid = /android/.test(userAgent)
    const isMacOS = /macintosh|mac os x/.test(userAgent) && !isIOS
    const isWindows = /windows|win32|win64/.test(userAgent)
    const isMobile = /mobile|android|iphone|ipad|phone|blackberry|opera mini|iemobile|wpdesktop/.test(userAgent)

    // Check WebAuthn support
    try {
      if (window.PublicKeyCredential && window.navigator.credentials) {
        isSupported = true
        
        // Check platform authenticator availability
        isPlatformAuthenticatorAvailable = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
        
        // Check for user verification support
        if (typeof window.PublicKeyCredential.isConditionalMediationAvailable === 'function') {
          isUserVerificationSupported = await PublicKeyCredential.isConditionalMediationAvailable()
        }

        // Infer biometric capabilities based on device
        if (isPlatformAuthenticatorAvailable) {
          if (isIOS) {
            // iOS devices typically support Face ID and/or Touch ID
            biometricTypes = ['face', 'fingerprint']
          } else if (isAndroid) {
            // Android devices typically support fingerprint and face unlock
            biometricTypes = ['fingerprint', 'face']
          } else if (isMacOS) {
            // macOS typically supports Touch ID on newer devices
            biometricTypes = ['fingerprint']
          } else if (isWindows) {
            // Windows Hello
            biometricTypes = ['fingerprint', 'face']
          } else {
            biometricTypes = ['unknown']
          }
        }
      }
    } catch (error) {
      console.warn('[WebAuthn Service] Error checking WebAuthn capabilities:', error)
    }

    return {
      isSupported,
      isPlatformAuthenticatorAvailable,
      biometricTypes,
      biometricAvailability: {
        faceID: isIOS && biometricTypes.includes('face'),
        touchID: (isIOS || isMacOS) && biometricTypes.includes('fingerprint'),
        windowsHello: isWindows && isPlatformAuthenticatorAvailable,
        androidFingerprint: isAndroid && biometricTypes.includes('fingerprint'),
        androidFace: isAndroid && biometricTypes.includes('face')
      },
      deviceInfo: {
        platform: navigator.platform,
        isMobile,
        isIOS,
        isAndroid,
        isMacOS,
        isWindows
      }
    }
  }

  /**
   * Handle WebAuthn errors and convert them to user-friendly messages
   */
  static handleWebAuthnError(error: any): WebAuthnError {
    const errorName = error?.name || error?.code || 'UnknownError'
    
    switch (errorName) {
      case 'NotSupportedError':
        return {
          code: 'NOT_SUPPORTED',
          message: 'Your browser or device doesn\'t support biometric authentication.',
          isRecoverable: false,
          suggestedAction: 'Please try using a different browser or device, or use traditional password login.'
        }
      
      case 'NotAllowedError':
        return {
          code: 'USER_CANCELLED',
          message: 'Biometric authentication was cancelled or denied.',
          isRecoverable: true,
          suggestedAction: 'Please try again and follow the biometric prompt on your device.'
        }
      
      case 'SecurityError':
        return {
          code: 'SECURITY_ERROR',
          message: 'Security requirements not met for biometric authentication.',
          isRecoverable: false,
          suggestedAction: 'Please ensure you\'re using a secure connection (HTTPS) and try again.'
        }
      
      case 'InvalidStateError':
        return {
          code: 'INVALID_STATE',
          message: 'Biometric authenticator is in an invalid state.',
          isRecoverable: true,
          suggestedAction: 'Please try again or restart your browser if the problem persists.'
        }
      
      case 'UnknownError':
        return {
          code: 'UNKNOWN_ERROR',
          message: 'An unknown error occurred during biometric authentication.',
          isRecoverable: true,
          suggestedAction: 'Please try again or contact support if the problem persists.'
        }
      
      default:
        return {
          code: 'UNKNOWN',
          message: 'An unexpected error occurred during biometric authentication.',
          isRecoverable: true,
          suggestedAction: 'Please try again or contact support if the problem persists.'
        }
    }
  }

  /**
   * Register a new biometric credential
   */
  static async register(options: { userId: string; userName: string; userDisplayName: string }): Promise<any> {
    const capabilities = await this.checkBrowserCapabilities();
    if (!capabilities.isSupported || !capabilities.isPlatformAuthenticatorAvailable) {
      throw new Error('Biometric authentication is not available on this device');
    }

    // Generate challenge for WebAuthn registration
    const challenge = new Uint8Array(32);
    crypto.getRandomValues(challenge);
    const userIdBytes = new TextEncoder().encode(options.userId);

    const registrationOptions = {
      publicKey: {
        challenge,
        rp: {
          name: 'FacePay',
          id: window.location.hostname
        },
        user: {
          id: userIdBytes,
          name: options.userName,
          displayName: options.userDisplayName
        },
        pubKeyCredParams: [
          { alg: -7, type: 'public-key' as const },
          { alg: -257, type: 'public-key' as const }
        ],
        timeout: 60000,
        attestation: 'direct' as AttestationConveyancePreference,
        authenticatorSelection: {
          authenticatorAttachment: 'platform',
          userVerification: 'required',
          requireResidentKey: false
        }
      }
    };

    try {
      const credential = await navigator.credentials.create(registrationOptions) as PublicKeyCredential;
      
      if (!credential) {
        throw new Error('Failed to create biometric credential');
      }

      return {
        id: credential.id,
        rawId: Array.from(new Uint8Array(credential.rawId)),
        response: {
          attestationObject: Array.from(new Uint8Array((credential.response as AuthenticatorAttestationResponse).attestationObject)),
          clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON))
        },
        type: credential.type
      };
    } catch (err) {
      console.error('[WebAuthn Service] Registration error:', err);
      const webAuthnError = this.handleWebAuthnError(err);
      throw new Error(webAuthnError.message);
    }
  }

  /**
   * Authenticate with existing biometric credential
   */
  static async authenticate(): Promise<any> {
    const capabilities = await this.checkBrowserCapabilities();
    if (!capabilities.isSupported || !capabilities.isPlatformAuthenticatorAvailable) {
      throw new Error('Biometric authentication is not available on this device');
    }

    const challenge = new Uint8Array(32);
    crypto.getRandomValues(challenge);

    const authenticationOptions = {
      publicKey: {
        challenge,
        timeout: 60000,
        rpId: window.location.hostname,
        userVerification: 'required',
        allowCredentials: []
      }
    };

    try {
      const credential = await navigator.credentials.get(authenticationOptions) as PublicKeyCredential;
      
      if (!credential) {
        throw new Error('No biometric credential returned');
      }

      return {
        id: credential.id,
        rawId: Array.from(new Uint8Array(credential.rawId)),
        response: {
          authenticatorData: Array.from(new Uint8Array((credential.response as AuthenticatorAssertionResponse).authenticatorData)),
          clientDataJSON: Array.from(new Uint8Array(credential.response.clientDataJSON)),
          signature: Array.from(new Uint8Array((credential.response as AuthenticatorAssertionResponse).signature))
        },
        type: credential.type
      };
    } catch (err) {
      console.error('[WebAuthn Service] Authentication error:', err);
      const webAuthnError = this.handleWebAuthnError(err);
      throw new Error(webAuthnError.message);
    }
  }
}