"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5900],{45900:function(e,t,i){i.d(t,{G:function(){return r}});var o=i(21424),n=i(74550);class r{static async checkBrowserCapabilities(){console.log("[WebAuthn Service] Starting browser capabilities check..."),console.log("[WebAuthn Service] WebAuthn supported:","credentials"in navigator),console.log("[WebAuthn Service] PublicKeyCredential:",!!window.PublicKeyCredential),console.log("[WebAuthn Service] User Agent:",navigator.userAgent),console.log("[WebAuthn Service] Platform:",navigator.platform),console.log("[WebAuthn Service] Location:",window.location.href),console.log("[WebAuthn Service] Is HTTPS:","https:"===window.location.protocol),console.log("[WebAuthn Service] Is localhost:","localhost"===window.location.hostname),console.log("[WebAuthn Service] Hostname:",window.location.hostname),console.log("[WebAuthn Service] Port:",window.location.port),console.log("[WebAuthn Service] rpID will be:","localhost"===window.location.hostname?"localhost":window.location.hostname);let e=!1,t=!1,i=[];if(!navigator)return{isSupported:!1,isPlatformAuthenticatorAvailable:!1,biometricTypes:[],biometricAvailability:{faceID:!1,touchID:!1,windowsHello:!1,androidFingerprint:!1,androidFace:!1},deviceInfo:{platform:"server",isMobile:!1,isIOS:!1,isAndroid:!1,isMacOS:!1,isWindows:!1}};let n=navigator.userAgent.toLowerCase(),r=/iphone|ipad|ipod/.test(n),a=/android/.test(n),l=/macintosh|mac os x/.test(n)&&!r,s=/windows|win32|win64/.test(n),c=/mobile|android|iphone|ipad|phone|blackberry|opera mini|iemobile|wpdesktop/.test(n);try{if(window.PublicKeyCredential&&window.navigator.credentials){if(e=!0,console.log("[WebAuthn Service] WebAuthn APIs available, checking platform authenticator..."),t=await (0,o.Fb)(PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable(),o.LS.QUICK_OPERATION,"Platform authenticator check timed out","platform-authenticator-check"),console.log("[WebAuthn Service] Platform authenticator available:",t),PublicKeyCredential.isConditionalMediationAvailable)try{let e=await PublicKeyCredential.isConditionalMediationAvailable();console.log("[WebAuthn Service] Conditional UI available:",e)}catch(e){console.log("[WebAuthn Service] Conditional UI check failed:",e)}else console.log("[WebAuthn Service] Conditional UI not supported");t?(console.log("[WebAuthn Service] Inferring biometric types for device..."),r?(i=["face","fingerprint"],console.log("[WebAuthn Service] iOS device - Face ID and Touch ID available")):a?(i=["fingerprint","face"],console.log("[WebAuthn Service] Android device - Fingerprint and Face available")):l?(i=["fingerprint"],console.log("[WebAuthn Service] macOS device - Touch ID available")):s?(i=["fingerprint","face"],console.log("[WebAuthn Service] Windows device - Windows Hello available")):(i=["unknown"],console.log("[WebAuthn Service] Unknown device type - generic biometric available"))):console.log("[WebAuthn Service] No platform authenticator available")}}catch(e){(0,o.q4)(e)?console.warn("[WebAuthn Service] Capabilities check timed out, assuming not available"):console.error("[WebAuthn Service] Error checking WebAuthn capabilities:",{name:e instanceof Error?e.name:"Unknown",message:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:void 0})}return console.log("[WebAuthn Service] Final capabilities result:",{isSupported:e,isPlatformAuthenticatorAvailable:t,biometricTypes:i,biometricAvailability:{faceID:r&&i.includes("face"),touchID:(r||l)&&i.includes("fingerprint"),windowsHello:s&&t,androidFingerprint:a&&i.includes("fingerprint"),androidFace:a&&i.includes("face")},deviceInfo:{platform:navigator.platform,isMobile:c,isIOS:r,isAndroid:a,isMacOS:l,isWindows:s}}),{isSupported:e,isPlatformAuthenticatorAvailable:t,biometricTypes:i,biometricAvailability:{faceID:r&&i.includes("face"),touchID:(r||l)&&i.includes("fingerprint"),windowsHello:s&&t,androidFingerprint:a&&i.includes("fingerprint"),androidFace:a&&i.includes("face")},deviceInfo:{platform:navigator.platform,isMobile:c,isIOS:r,isAndroid:a,isMacOS:l,isWindows:s}}}static handleWebAuthnError(e){var t,i;let n=(null==e?void 0:e.name)||(null==e?void 0:e.code)||"UnknownError",r=(null==e?void 0:e.message)||"";switch(console.error("[WebAuthn Service] DETAILED ERROR ANALYSIS:",{errorName:n,errorMessage:r,errorStack:null==e?void 0:e.stack,errorType:typeof e,isWebAuthnError:(null==e?void 0:null===(t=e.name)||void 0===t?void 0:t.includes("WebAuthn"))||(null==e?void 0:null===(i=e.name)||void 0===i?void 0:i.includes("Credential")),timestamp:new Date().toISOString(),userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A",origin:window.location.origin,protocol:window.location.protocol,fullError:e}),"NotAllowedError"===n?console.warn("[WebAuthn Service] USER CANCELLED OR DENIED biometric prompt - This is expected if user cancels Face ID/Touch ID"):"NotSupportedError"===n?console.error("[WebAuthn Service] WEBAUTHN NOT SUPPORTED - Device or browser lacks biometric capabilities"):"SecurityError"===n?console.error("[WebAuthn Service] SECURITY ERROR - Likely HTTPS issue or invalid RP configuration"):"TimeoutError"===n?console.warn("[WebAuthn Service] TIMEOUT - User took too long or biometric sensor unresponsive"):(null==r?void 0:r.includes("credentials.create"))?console.error("[WebAuthn Service] CREDENTIAL CREATION ERROR - Registration failed"):(null==r?void 0:r.includes("credentials.get"))&&console.error("[WebAuthn Service] CREDENTIAL GET ERROR - Authentication failed"),n){case"TimeoutError":return{code:"TIMEOUT",message:"Biometric authentication timed out.",isRecoverable:!0,suggestedAction:"The operation took too long. Please try again or use an alternative method.",details:"Timeout after ".concat(o.LS.WEBAUTHN_OPERATION,"ms")};case"NotSupportedError":return{code:"NOT_SUPPORTED",message:"Your browser or device doesn't support biometric authentication.",isRecoverable:!1,suggestedAction:"Please try using a different browser or device, or use traditional password login.",details:"WebAuthn or platform authenticator not supported"};case"NotAllowedError":return{code:"USER_CANCELLED",message:"Biometric authentication was cancelled or denied.",isRecoverable:!0,suggestedAction:"Please try again and follow the biometric prompt on your device.",details:"User cancelled Face ID/Touch ID prompt or permission denied"};case"SecurityError":return{code:"SECURITY_ERROR",message:"Security requirements not met for biometric authentication.",isRecoverable:!1,suggestedAction:"Please ensure you're using a secure connection (HTTPS) and try again.",details:"HTTPS required or invalid relying party configuration"};case"InvalidStateError":return{code:"INVALID_STATE",message:"Credential already exists or invalid authenticator state.",isRecoverable:!0,suggestedAction:"This credential may already be registered. Try authenticating instead.",details:"Credential already exists or authenticator in invalid state"};case"UnknownError":return{code:"UNKNOWN",message:"An unexpected error occurred during biometric authentication.",isRecoverable:!0,suggestedAction:"Please try again or contact support if the problem persists.",details:r||"Unknown WebAuthn error"};default:if((null==r?void 0:r.includes("Failed to fetch"))||(null==r?void 0:r.includes("NetworkError")))return{code:"NETWORK_ERROR",message:"Network error while communicating with authentication server.",isRecoverable:!0,suggestedAction:"Check your internet connection and try again.",details:"Network connectivity issue"};if((null==r?void 0:r.includes("400"))||(null==r?void 0:r.includes("Bad Request")))return{code:"BAD_REQUEST",message:"Invalid authentication request.",isRecoverable:!1,suggestedAction:"Please refresh the page and try again.",details:"Invalid request format or parameters"};if((null==r?void 0:r.includes("401"))||(null==r?void 0:r.includes("Unauthorized")))return{code:"UNAUTHORIZED",message:"Authentication failed - credential not verified.",isRecoverable:!0,suggestedAction:"Please try registering your biometric data again.",details:"Backend authentication verification failed"};return{code:"UNKNOWN",message:r||"An unexpected error occurred during biometric authentication.",isRecoverable:!0,suggestedAction:"Please try again or contact support if the problem persists.",details:"Unhandled error: ".concat(n)}}}static async register(e,t){console.log("[WebAuthn Service] Starting REAL biometric registration:",{userId:e.userId,userName:e.userName,userDisplayName:e.userDisplayName,hasAbortSignal:!!t,timestamp:new Date().toISOString(),origin:window.location.origin,userAgent:navigator.userAgent}),this.logWebAuthnConfiguration();let i=await this.checkBrowserCapabilities();if(console.log("[WebAuthn Service] Registration capabilities check:",i),!i.isSupported||!i.isPlatformAuthenticatorAvailable)throw console.error("[WebAuthn Service] Registration failed - capabilities check:",{isSupported:i.isSupported,isPlatformAuthenticatorAvailable:i.isPlatformAuthenticatorAvailable,biometricTypes:i.biometricTypes,deviceInfo:i.deviceInfo}),Error("Biometric authentication is not available on this device");try{var r,a,l,s,c,u,d,h,v,g,p,b,m,A,f,S,w,y,T,I,W,E,R,P,C,O,N,k,D,L,U,F,B;let t=e.userId.includes("demo-real-"),i=t?"/api/webauthn/demo-register/start":"/api/webauthn/register/start";console.log("[WebAuthn Service] Using ".concat(t?"DEMO":"REGULAR"," registration endpoint:"),i),console.log("[WebAuthn Service] Step 1: Requesting REAL biometric registration options from backend...");let H={userId:e.userId,userName:e.userName,userDisplayName:e.userDisplayName};console.log("[WebAuthn Service] Registration request body:",H);let K=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(H),credentials:"include"});if(console.log("[WebAuthn Service] Registration options response status:",K.status),!K.ok){let e=await K.text();console.error("[WebAuthn Service] Failed to get registration options:",{status:K.status,statusText:K.statusText,error:e});let t="Failed to get registration options";try{t=JSON.parse(e).message||t}catch(i){t=e||t}throw Error(t)}let V=await K.json();if(console.log("[WebAuthn Service] Registration options response data:",V),!V.success||!(null===(r=V.data)||void 0===r?void 0:r.options))throw console.error("[WebAuthn Service] Invalid registration options response format:",V),Error("Invalid registration options response format");let x=V.data.options;console.log("[WebAuthn Service] Got registration options from backend:",{rpId:null===(a=x.rp)||void 0===a?void 0:a.id,rpName:null===(l=x.rp)||void 0===l?void 0:l.name,userName:null===(s=x.user)||void 0===s?void 0:s.name,userDisplayName:null===(c=x.user)||void 0===c?void 0:c.displayName,userVerification:null===(u=x.authenticatorSelection)||void 0===u?void 0:u.userVerification,authenticatorAttachment:null===(d=x.authenticatorSelection)||void 0===d?void 0:d.authenticatorAttachment,residentKey:null===(h=x.authenticatorSelection)||void 0===h?void 0:h.residentKey,attestation:x.attestation,timeout:x.timeout,challengeLength:null===(v=x.challenge)||void 0===v?void 0:v.length,algorithms:null===(g=x.pubKeyCredParams)||void 0===g?void 0:g.map(e=>e.alg),excludeCredentials:(null===(p=x.excludeCredentials)||void 0===p?void 0:p.length)||0}),console.log("[WebAuthn Service] Step 2: Starting real biometric registration..."),console.log("[WebAuthn Service] About to call startRegistration() - BIOMETRIC PROMPT WILL APPEAR"),console.log("[WebAuthn Service] Registration options being passed to startRegistration:",JSON.stringify(x,null,2));let _=await (0,o.Fb)((0,n.RQ)(x),o.LS.WEBAUTHN_OPERATION,"Biometric registration timed out. Please try again.","webauthn-registration");console.log("[WebAuthn Service] startRegistration() completed successfully!"),console.log("[WebAuthn Service] Real biometric registration completed:",{credentialId:_.id,type:_.type,rawIdLength:null===(b=_.rawId)||void 0===b?void 0:b.length,responseType:(null===(A=_.response)||void 0===A?void 0:null===(m=A.constructor)||void 0===m?void 0:m.name)||"unknown",attestationObjectLength:null===(S=_.response)||void 0===S?void 0:null===(f=S.attestationObject)||void 0===f?void 0:f.length,clientDataJSONLength:null===(y=_.response)||void 0===y?void 0:null===(w=y.clientDataJSON)||void 0===w?void 0:w.length,transports:null===(T=_.response)||void 0===T?void 0:T.transports,authenticatorDataLength:null===(W=_.response)||void 0===W?void 0:null===(I=W.authenticatorData)||void 0===I?void 0:I.length,timestamp:new Date().toISOString()}),console.log("[WebAuthn Service] Step 3: Sending credential to backend for verification...");let q=t?"/api/webauthn/demo-register/complete":"/api/webauthn/register/complete";console.log("[WebAuthn Service] Using ".concat(t?"DEMO":"REGULAR"," completion endpoint:"),q);let M=t?{credential:_,userId:e.userId}:{credential:_};console.log("[WebAuthn Service] Verification request body structure:",{hasCredential:!!M.credential,credentialId:null===(E=M.credential)||void 0===E?void 0:E.id,credentialType:null===(R=M.credential)||void 0===R?void 0:R.type,userId:t?e.userId:"not included for authenticated users"});let G=await fetch(q,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(M),credentials:"include"});if(console.log("[WebAuthn Service] Verification response status:",G.status),!G.ok){let e=await G.text();console.error("[WebAuthn Service] Registration verification failed:",{status:G.status,statusText:G.statusText,error:e});let t="Failed to verify registration";try{t=JSON.parse(e).message||t}catch(i){t=e||t}throw Error(t)}let J=await G.json();if(console.log("[WebAuthn Service] Registration verification response:",J),console.log("[WebAuthn Service] Registration verification completed:",{success:J.success,verified:null===(P=J.data)||void 0===P?void 0:P.verified,biometricVerified:null===(C=J.data)||void 0===C?void 0:C.biometricVerified,authenticatorType:null===(O=J.data)||void 0===O?void 0:O.authenticatorType,biometricUsed:null===(N=J.data)||void 0===N?void 0:N.biometricUsed,deviceType:null===(D=J.data)||void 0===D?void 0:null===(k=D.credential)||void 0===k?void 0:k.deviceType,backedUp:null===(U=J.data)||void 0===U?void 0:null===(L=U.credential)||void 0===L?void 0:L.backedUp}),!J.success||!(null===(F=J.data)||void 0===F?void 0:F.verified)){let e=J.message||"Registration verification failed";throw console.error("[WebAuthn Service] Verification unsuccessful:",{success:J.success,verified:null===(B=J.data)||void 0===B?void 0:B.verified,message:J.message}),Error(e)}return _}catch(t){console.error("[WebAuthn Service] Real registration error details:",{name:null==t?void 0:t.name,message:null==t?void 0:t.message,code:null==t?void 0:t.code,stack:null==t?void 0:t.stack,isTimeoutError:(0,o.q4)(t),type:typeof t,stringified:String(t)});let e=this.handleWebAuthnError(t);throw console.error("[WebAuthn Service] Processed registration error:",e),Error(e.message)}}static async authenticate(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1?arguments[1]:void 0;console.log("[WebAuthn Service] Starting REAL biometric authentication:",{email:e.email,userId:e.userId,hasAbortSignal:!!t,timestamp:new Date().toISOString(),origin:window.location.origin,userAgent:navigator.userAgent}),this.logWebAuthnConfiguration();let i=await this.checkBrowserCapabilities();if(console.log("[WebAuthn Service] Authentication capabilities check:",i),!i.isSupported||!i.isPlatformAuthenticatorAvailable)throw console.error("[WebAuthn Service] Authentication failed - capabilities check:",{isSupported:i.isSupported,isPlatformAuthenticatorAvailable:i.isPlatformAuthenticatorAvailable,biometricTypes:i.biometricTypes,deviceInfo:i.deviceInfo}),Error("Biometric authentication is not available on this device");try{var r,a,l,s,c,u,d,h,v,g,p,b,m,A,f,S,w,y,T,I,W,E,R,P,C,O;console.log("[WebAuthn Service] Step 1: Requesting authentication options from backend...");let t={email:e.email,userId:e.userId};console.log("[WebAuthn Service] Authentication request body:",t);let i=await fetch("/api/webauthn/authenticate/start",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(console.log("[WebAuthn Service] Authentication options response status:",i.status),!i.ok){let e=await i.text();console.error("[WebAuthn Service] Failed to get authentication options:",{status:i.status,statusText:i.statusText,error:e});let t="Failed to get authentication options";try{t=JSON.parse(e).message||t}catch(i){t=e||t}throw Error(t)}let N=await i.json();if(console.log("[WebAuthn Service] Authentication options response data:",N),!N.success||!(null===(r=N.data)||void 0===r?void 0:r.options))throw console.error("[WebAuthn Service] Invalid authentication options response format:",N),Error("Invalid authentication options response format");let k=N.data.options;console.log("[WebAuthn Service] Got authentication options from backend:",{rpId:k.rpId,userVerification:k.userVerification,timeout:k.timeout,challengeLength:null===(a=k.challenge)||void 0===a?void 0:a.length,allowCredentialsCount:(null===(l=k.allowCredentials)||void 0===l?void 0:l.length)||0,biometricRequired:N.data.biometricRequired}),console.log("[WebAuthn Service] Step 2: Starting real biometric authentication..."),console.log("[WebAuthn Service] About to call startAuthentication() - BIOMETRIC PROMPT WILL APPEAR"),console.log("[WebAuthn Service] Authentication options being passed to startAuthentication:",JSON.stringify(k,null,2));let D=await (0,o.Fb)((0,n.oz)(k),o.LS.WEBAUTHN_OPERATION,"Biometric authentication timed out. Please try again.","webauthn-authentication");console.log("[WebAuthn Service] startAuthentication() completed successfully!"),console.log("[WebAuthn Service] Real biometric authentication completed:",{credentialId:D.id,type:D.type,rawIdLength:null===(s=D.rawId)||void 0===s?void 0:s.length,responseType:(null===(u=D.response)||void 0===u?void 0:null===(c=u.constructor)||void 0===c?void 0:c.name)||"unknown",authenticatorDataLength:null===(h=D.response)||void 0===h?void 0:null===(d=h.authenticatorData)||void 0===d?void 0:d.length,clientDataJSONLength:null===(g=D.response)||void 0===g?void 0:null===(v=g.clientDataJSON)||void 0===v?void 0:v.length,signatureLength:null===(b=D.response)||void 0===b?void 0:null===(p=b.signature)||void 0===p?void 0:p.length,userHandleLength:(null===(A=D.response)||void 0===A?void 0:null===(m=A.userHandle)||void 0===m?void 0:m.length)||0,timestamp:new Date().toISOString()}),console.log("[WebAuthn Service] Step 3: Sending credential to backend for verification...");let L={credential:D,email:e.email};console.log("[WebAuthn Service] Authentication verification request body structure:",{hasCredential:!!L.credential,credentialId:null===(f=L.credential)||void 0===f?void 0:f.id,credentialType:null===(S=L.credential)||void 0===S?void 0:S.type,email:L.email});let U=await fetch("/api/webauthn/authenticate/complete",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(L),credentials:"include"});if(console.log("[WebAuthn Service] Authentication verification response status:",U.status),!U.ok){let e=await U.text();console.error("[WebAuthn Service] Authentication verification failed:",{status:U.status,statusText:U.statusText,error:e});let t="Failed to verify authentication";try{t=JSON.parse(e).message||t}catch(i){t=e||t}throw Error(t)}let F=await U.json();if(console.log("[WebAuthn Service] Authentication verification response:",F),console.log("[WebAuthn Service] Authentication verification completed:",{success:F.success,verified:null===(w=F.data)||void 0===w?void 0:w.verified,biometricVerified:null===(y=F.data)||void 0===y?void 0:y.biometricVerified,authenticatorType:null===(T=F.data)||void 0===T?void 0:T.authenticatorType,biometricUsed:null===(I=F.data)||void 0===I?void 0:I.biometricUsed,userId:null===(E=F.data)||void 0===E?void 0:null===(W=E.user)||void 0===W?void 0:W.id,userName:null===(P=F.data)||void 0===P?void 0:null===(R=P.user)||void 0===R?void 0:R.name}),!F.success||!(null===(C=F.data)||void 0===C?void 0:C.verified)){let e=F.message||"Authentication verification failed";throw console.error("[WebAuthn Service] Authentication verification unsuccessful:",{success:F.success,verified:null===(O=F.data)||void 0===O?void 0:O.verified,message:F.message}),Error(e)}return{...D}}catch(t){console.error("[WebAuthn Service] Real authentication error details:",{name:null==t?void 0:t.name,message:null==t?void 0:t.message,code:null==t?void 0:t.code,stack:null==t?void 0:t.stack,isTimeoutError:(0,o.q4)(t),type:typeof t,stringified:String(t)});let e=this.handleWebAuthnError(t);throw console.error("[WebAuthn Service] Processed authentication error:",e),Error(e.message)}}static validateBiometricAuthentication(e,t){return e&&e.userVerified?{isValid:!0}:{isValid:!1,reason:"User verification not performed - biometric authentication required"}}static analyzeBiometricAuthentication(e,t){return{userVerified:(null==e?void 0:e.userVerified)||!1,userPresent:(null==e?void 0:e.userPresent)||!1,deviceType:(null==t?void 0:t.isMobile)?"mobile":"desktop",platformInfo:t||{}}}static logBiometricAuthenticationResult(e,t,i){console.log("[WebAuthn Service] Biometric authentication completed:",{userId:t,success:(null==i?void 0:i.verified)||!1,userVerified:(null==e?void 0:e.userVerified)||!1,deviceType:(null==e?void 0:e.deviceType)||"unknown",timestamp:new Date().toISOString()})}static getBiometricTypeName(e){return e.biometricTypes.includes("face")?e.deviceInfo.isIOS?"Face ID":"Face Recognition":e.biometricTypes.includes("fingerprint")?e.deviceInfo.isIOS?"Touch ID":e.deviceInfo.isWindows?"Windows Hello":"Fingerprint":e.deviceInfo.isWindows&&e.isPlatformAuthenticatorAvailable?"Windows Hello":"Biometric Authentication"}static getBiometricIcon(e){return e.biometricTypes.includes("face")?"\uD83D\uDC64":e.biometricTypes.includes("fingerprint")?"\uD83D\uDC46":e.deviceInfo.isMobile?"\uD83D\uDCF1":e.deviceInfo.isWindows?"\uD83D\uDD10":"\uD83D\uDEE1️"}static async getDebugInfo(){let e={timestamp:new Date().toISOString(),environment:{userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A",language:"undefined"!=typeof navigator?navigator.language:"N/A",cookieEnabled:"undefined"!=typeof navigator&&navigator.cookieEnabled,onLine:"undefined"!=typeof navigator&&navigator.onLine,platform:"undefined"!=typeof navigator?navigator.platform:"N/A"},location:{origin:window.location.origin,protocol:window.location.protocol,hostname:window.location.hostname,port:window.location.port},webauthn:{isSupported:!!window.PublicKeyCredential,isUserVerifyingPlatformAuthenticatorAvailable:!1,isConditionalMediationAvailable:!1},capabilities:null,errors:[]};try{if(window.PublicKeyCredential){try{e.webauthn.isUserVerifyingPlatformAuthenticatorAvailable=await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()}catch(t){e.errors.push("Platform authenticator check failed: ".concat(t))}try{PublicKeyCredential.isConditionalMediationAvailable&&(e.webauthn.isConditionalMediationAvailable=await PublicKeyCredential.isConditionalMediationAvailable())}catch(t){e.errors.push("Conditional mediation check failed: ".concat(t))}}try{e.capabilities=await this.checkBrowserCapabilities()}catch(t){e.errors.push("Capabilities check failed: ".concat(t))}}catch(t){e.errors.push("General debug info collection failed: ".concat(t))}return console.log("[WebAuthn Service] COMPLETE DEBUG INFO:",e),e}static async testWebAuthnSupport(){console.log("[WebAuthn Service] TESTING WEBAUTHN SUPPORT...");let e=[],t=[],i=!0;window.PublicKeyCredential||(i=!1,e.push("WebAuthn API not available"),t.push("Use a modern browser that supports WebAuthn (Chrome 67+, Firefox 60+, Safari 14+)")),"https:"!==window.location.protocol&&"localhost"!==window.location.hostname&&(i=!1,e.push("HTTPS required for WebAuthn (except localhost)"),t.push("Use HTTPS in production or test on localhost"));try{window.PublicKeyCredential&&!await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()&&(i=!1,e.push("No platform authenticator available"),t.push("Enable Face ID/Touch ID on your device or use a device with biometric sensors"))}catch(i){e.push("Platform authenticator check failed: ".concat(i)),t.push("Check device biometric settings and browser permissions")}"undefined"==typeof navigator||navigator.onLine||(e.push("Device appears to be offline"),t.push("Check internet connection"));let o={supported:i,issues:e,recommendations:t};return console.log("[WebAuthn Service] WEBAUTHN SUPPORT TEST RESULTS:",o),o}static shouldAllowCrossPlatformFallback(e){return!e.isPlatformAuthenticatorAvailable}static getRegistrationOptionsWithFallback(e){return this.shouldAllowCrossPlatformFallback(e)?(console.log("[WebAuthn Service] Platform authenticator not available, allowing cross-platform fallback"),{authenticatorSelection:{requireResidentKey:!1,userVerification:"preferred"}}):{authenticatorSelection:{authenticatorAttachment:"platform",requireResidentKey:!1,userVerification:"preferred"}}}static logWebAuthnConfiguration(){console.log("[WebAuthn Service] CONFIGURATION DEBUG:",{hostname:window.location.hostname,protocol:window.location.protocol,port:window.location.port,origin:window.location.origin,rpIdWillBe:"localhost"===window.location.hostname?"localhost":window.location.hostname,isLocalhost:"localhost"===window.location.hostname,isHTTPS:"https:"===window.location.protocol,userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A"})}}},21424:function(e,t,i){i.d(t,{Fb:function(){return n},LS:function(){return a},Oo:function(){return l},ld:function(){return c},q4:function(){return s}});class o extends Error{constructor(e,t,i){super(e),this.operation=t,this.timeout=i,this.name="TimeoutError",this.isTimeout=!0,Object.setPrototypeOf(this,o.prototype)}}function n(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"operation";return new Promise((r,a)=>{let l=setTimeout(()=>{a(new o(i,n,t))},t);e.then(e=>{clearTimeout(l),r(e)}).catch(e=>{clearTimeout(l),a(e)})})}class r{start(){this.cancelled||(this.timeoutId=setTimeout(()=>{this.cancelled||this.callback()},this.delay))}cancel(){this.cancelled=!0,this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null)}get isCancelled(){return this.cancelled}constructor(e,t){this.callback=e,this.delay=t,this.timeoutId=null,this.cancelled=!1}}let a={CAMERA_INIT:5e3,WEBAUTHN_OPERATION:3e4,FACE_DETECTION:1e4,API_CALL:1e4,ANIMATION:2e3,QUICK_OPERATION:3e3,LONG_OPERATION:6e4,TAKING_LONGER_THRESHOLD:3e3};class l{async execute(e,t,i){let o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"operation";this.abortController=new AbortController,this.takingLongerTimeout=new r(this.onTakingLonger,a.TAKING_LONGER_THRESHOLD),this.takingLongerTimeout.start(),this.onProgress&&(this.progressAnimation=function(e,t,i){let o;let n=Date.now(),a=()=>{if(null==i?void 0:i.aborted)return;let r=Math.min((Date.now()-n)/e*100,100);t(r),r<100&&(o=requestAnimationFrame(a))};return o=requestAnimationFrame(a),new r(()=>{o&&cancelAnimationFrame(o)},e)}(t,this.onProgress,this.abortController.signal));try{return await function(e,t,i,o){var r;let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"operation";return r=n(e,t,i,a),o?new Promise((e,t)=>{if(o.aborted){t(Error("Operation was aborted"));return}let i=()=>{t(Error("Operation was aborted"))};o.addEventListener("abort",i),r.then(e,t).finally(()=>{o.removeEventListener("abort",i)})}):r}(e(),t,i,this.abortController.signal,o)}finally{this.cleanup()}}cancel(){var e;this.abortController&&this.abortController.abort(),null===(e=this.onCancel)||void 0===e||e.call(this),this.cleanup()}cleanup(){var e,t;null===(e=this.takingLongerTimeout)||void 0===e||e.cancel(),null===(t=this.progressAnimation)||void 0===t||t.cancel(),this.abortController=null,this.takingLongerTimeout=null,this.progressAnimation=null}constructor(e,t,i){this.onTakingLonger=e,this.onProgress=t,this.onCancel=i,this.abortController=null,this.takingLongerTimeout=null,this.progressAnimation=null}}function s(e){return e instanceof o||(null==e?void 0:e.name)==="TimeoutError"||(null==e?void 0:e.isTimeout)===!0}function c(e,t){return"".concat(e," is taking longer than expected (").concat(Math.round(t/1e3),"s). You can cancel or wait for it to complete.")}}}]);