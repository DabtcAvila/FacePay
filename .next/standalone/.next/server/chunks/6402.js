"use strict";exports.id=6402,exports.ids=[6402],exports.modules={36402:(e,t,i)=>{i.d(t,{G:()=>n});var o=i(36848),r=i(17602);class n{static async checkBrowserCapabilities(){return console.log("[WebAuthn Service] Starting browser capabilities check..."),console.log("[WebAuthn Service] WebAuthn supported:","credentials"in navigator),console.log("[WebAuthn Service] PublicKeyCredential:",!!window.PublicKeyCredential),console.log("[WebAuthn Service] User Agent:",navigator.userAgent),console.log("[WebAuthn Service] Platform:",navigator.platform),console.log("[WebAuthn Service] Location:",window.location.href),console.log("[WebAuthn Service] Is HTTPS:","https:"===window.location.protocol),console.log("[WebAuthn Service] Is localhost:","localhost"===window.location.hostname),console.log("[WebAuthn Service] Hostname:",window.location.hostname),console.log("[WebAuthn Service] Port:",window.location.port),console.log("[WebAuthn Service] rpID will be:","localhost"===window.location.hostname?"localhost":window.location.hostname),{isSupported:!1,isPlatformAuthenticatorAvailable:!1,biometricTypes:[],biometricAvailability:{faceID:!1,touchID:!1,windowsHello:!1,androidFingerprint:!1,androidFace:!1},deviceInfo:{platform:"server",isMobile:!1,isIOS:!1,isAndroid:!1,isMacOS:!1,isWindows:!1}}}static handleWebAuthnError(e){let t=e?.name||e?.code||"UnknownError",i=e?.message||"";switch(console.error("[WebAuthn Service] DETAILED ERROR ANALYSIS:",{errorName:t,errorMessage:i,errorStack:e?.stack,errorType:typeof e,isWebAuthnError:e?.name?.includes("WebAuthn")||e?.name?.includes("Credential"),timestamp:new Date().toISOString(),userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A",origin:"N/A",protocol:"N/A",fullError:e}),"NotAllowedError"===t?console.warn("[WebAuthn Service] USER CANCELLED OR DENIED biometric prompt - This is expected if user cancels Face ID/Touch ID"):"NotSupportedError"===t?console.error("[WebAuthn Service] WEBAUTHN NOT SUPPORTED - Device or browser lacks biometric capabilities"):"SecurityError"===t?console.error("[WebAuthn Service] SECURITY ERROR - Likely HTTPS issue or invalid RP configuration"):"TimeoutError"===t?console.warn("[WebAuthn Service] TIMEOUT - User took too long or biometric sensor unresponsive"):i?.includes("credentials.create")?console.error("[WebAuthn Service] CREDENTIAL CREATION ERROR - Registration failed"):i?.includes("credentials.get")&&console.error("[WebAuthn Service] CREDENTIAL GET ERROR - Authentication failed"),t){case"TimeoutError":return{code:"TIMEOUT",message:"Biometric authentication timed out.",isRecoverable:!0,suggestedAction:"The operation took too long. Please try again or use an alternative method.",details:`Timeout after ${o.LS.WEBAUTHN_OPERATION}ms`};case"NotSupportedError":return{code:"NOT_SUPPORTED",message:"Your browser or device doesn't support biometric authentication.",isRecoverable:!1,suggestedAction:"Please try using a different browser or device, or use traditional password login.",details:"WebAuthn or platform authenticator not supported"};case"NotAllowedError":return{code:"USER_CANCELLED",message:"Biometric authentication was cancelled or denied.",isRecoverable:!0,suggestedAction:"Please try again and follow the biometric prompt on your device.",details:"User cancelled Face ID/Touch ID prompt or permission denied"};case"SecurityError":return{code:"SECURITY_ERROR",message:"Security requirements not met for biometric authentication.",isRecoverable:!1,suggestedAction:"Please ensure you're using a secure connection (HTTPS) and try again.",details:"HTTPS required or invalid relying party configuration"};case"InvalidStateError":return{code:"INVALID_STATE",message:"Credential already exists or invalid authenticator state.",isRecoverable:!0,suggestedAction:"This credential may already be registered. Try authenticating instead.",details:"Credential already exists or authenticator in invalid state"};case"UnknownError":return{code:"UNKNOWN",message:"An unexpected error occurred during biometric authentication.",isRecoverable:!0,suggestedAction:"Please try again or contact support if the problem persists.",details:i||"Unknown WebAuthn error"};default:if(i?.includes("Failed to fetch")||i?.includes("NetworkError"))return{code:"NETWORK_ERROR",message:"Network error while communicating with authentication server.",isRecoverable:!0,suggestedAction:"Check your internet connection and try again.",details:"Network connectivity issue"};if(i?.includes("400")||i?.includes("Bad Request"))return{code:"BAD_REQUEST",message:"Invalid authentication request.",isRecoverable:!1,suggestedAction:"Please refresh the page and try again.",details:"Invalid request format or parameters"};if(i?.includes("401")||i?.includes("Unauthorized"))return{code:"UNAUTHORIZED",message:"Authentication failed - credential not verified.",isRecoverable:!0,suggestedAction:"Please try registering your biometric data again.",details:"Backend authentication verification failed"};return{code:"UNKNOWN",message:i||"An unexpected error occurred during biometric authentication.",isRecoverable:!0,suggestedAction:"Please try again or contact support if the problem persists.",details:`Unhandled error: ${t}`}}}static async register(e,t){console.log("[WebAuthn Service] Starting REAL biometric registration:",{userId:e.userId,userName:e.userName,userDisplayName:e.userDisplayName,hasAbortSignal:!!t,timestamp:new Date().toISOString(),origin:window.location.origin,userAgent:navigator.userAgent}),this.logWebAuthnConfiguration();let i=await this.checkBrowserCapabilities();if(console.log("[WebAuthn Service] Registration capabilities check:",i),!i.isSupported||!i.isPlatformAuthenticatorAvailable)throw console.error("[WebAuthn Service] Registration failed - capabilities check:",{isSupported:i.isSupported,isPlatformAuthenticatorAvailable:i.isPlatformAuthenticatorAvailable,biometricTypes:i.biometricTypes,deviceInfo:i.deviceInfo}),Error("Biometric authentication is not available on this device");try{let t=e.userId.includes("demo-real-"),i=t?"/api/webauthn/demo-register/start":"/api/webauthn/register/start";console.log(`[WebAuthn Service] Using ${t?"DEMO":"REGULAR"} registration endpoint:`,i),console.log("[WebAuthn Service] Step 1: Requesting REAL biometric registration options from backend...");let n={userId:e.userId,userName:e.userName,userDisplayName:e.userDisplayName};console.log("[WebAuthn Service] Registration request body:",n);let a=await fetch(i,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(n),credentials:"include"});if(console.log("[WebAuthn Service] Registration options response status:",a.status),!a.ok){let e=await a.text();console.error("[WebAuthn Service] Failed to get registration options:",{status:a.status,statusText:a.statusText,error:e});let t="Failed to get registration options";try{t=JSON.parse(e).message||t}catch{t=e||t}throw Error(t)}let s=await a.json();if(console.log("[WebAuthn Service] Registration options response data:",s),!s.success||!s.data?.options)throw console.error("[WebAuthn Service] Invalid registration options response format:",s),Error("Invalid registration options response format");let c=s.data.options;console.log("[WebAuthn Service] Got registration options from backend:",{rpId:c.rp?.id,rpName:c.rp?.name,userName:c.user?.name,userDisplayName:c.user?.displayName,userVerification:c.authenticatorSelection?.userVerification,authenticatorAttachment:c.authenticatorSelection?.authenticatorAttachment,residentKey:c.authenticatorSelection?.residentKey,attestation:c.attestation,timeout:c.timeout,challengeLength:c.challenge?.length,algorithms:c.pubKeyCredParams?.map(e=>e.alg),excludeCredentials:c.excludeCredentials?.length||0}),console.log("[WebAuthn Service] Step 2: Starting real biometric registration..."),console.log("[WebAuthn Service] About to call startRegistration() - BIOMETRIC PROMPT WILL APPEAR"),console.log("[WebAuthn Service] Registration options being passed to startRegistration:",JSON.stringify(c,null,2));let l=await (0,o.Fb)((0,r.RQ)(c),o.LS.WEBAUTHN_OPERATION,"Biometric registration timed out. Please try again.","webauthn-registration");console.log("[WebAuthn Service] startRegistration() completed successfully!"),console.log("[WebAuthn Service] Real biometric registration completed:",{credentialId:l.id,type:l.type,rawIdLength:l.rawId?.length,responseType:l.response?.constructor?.name||"unknown",attestationObjectLength:l.response?.attestationObject?.length,clientDataJSONLength:l.response?.clientDataJSON?.length,transports:l.response?.transports,authenticatorDataLength:l.response?.authenticatorData?.length,timestamp:new Date().toISOString()}),console.log("[WebAuthn Service] Step 3: Sending credential to backend for verification...");let u=t?"/api/webauthn/demo-register/complete":"/api/webauthn/register/complete";console.log(`[WebAuthn Service] Using ${t?"DEMO":"REGULAR"} completion endpoint:`,u);let d=t?{credential:l,userId:e.userId}:{credential:l};console.log("[WebAuthn Service] Verification request body structure:",{hasCredential:!!d.credential,credentialId:d.credential?.id,credentialType:d.credential?.type,userId:t?e.userId:"not included for authenticated users"});let h=await fetch(u,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(d),credentials:"include"});if(console.log("[WebAuthn Service] Verification response status:",h.status),!h.ok){let e=await h.text();console.error("[WebAuthn Service] Registration verification failed:",{status:h.status,statusText:h.statusText,error:e});let t="Failed to verify registration";try{t=JSON.parse(e).message||t}catch{t=e||t}throw Error(t)}let g=await h.json();if(console.log("[WebAuthn Service] Registration verification response:",g),console.log("[WebAuthn Service] Registration verification completed:",{success:g.success,verified:g.data?.verified,biometricVerified:g.data?.biometricVerified,authenticatorType:g.data?.authenticatorType,biometricUsed:g.data?.biometricUsed,deviceType:g.data?.credential?.deviceType,backedUp:g.data?.credential?.backedUp}),!g.success||!g.data?.verified){let e=g.message||"Registration verification failed";throw console.error("[WebAuthn Service] Verification unsuccessful:",{success:g.success,verified:g.data?.verified,message:g.message}),Error(e)}return l}catch(t){console.error("[WebAuthn Service] Real registration error details:",{name:t?.name,message:t?.message,code:t?.code,stack:t?.stack,isTimeoutError:(0,o.q4)(t),type:typeof t,stringified:String(t)});let e=this.handleWebAuthnError(t);throw console.error("[WebAuthn Service] Processed registration error:",e),Error(e.message)}}static async authenticate(e={},t){console.log("[WebAuthn Service] Starting REAL biometric authentication:",{email:e.email,userId:e.userId,hasAbortSignal:!!t,timestamp:new Date().toISOString(),origin:window.location.origin,userAgent:navigator.userAgent}),this.logWebAuthnConfiguration();let i=await this.checkBrowserCapabilities();if(console.log("[WebAuthn Service] Authentication capabilities check:",i),!i.isSupported||!i.isPlatformAuthenticatorAvailable)throw console.error("[WebAuthn Service] Authentication failed - capabilities check:",{isSupported:i.isSupported,isPlatformAuthenticatorAvailable:i.isPlatformAuthenticatorAvailable,biometricTypes:i.biometricTypes,deviceInfo:i.deviceInfo}),Error("Biometric authentication is not available on this device");try{console.log("[WebAuthn Service] Step 1: Requesting authentication options from backend...");let t={email:e.email,userId:e.userId};console.log("[WebAuthn Service] Authentication request body:",t);let i=await fetch("/api/webauthn/authenticate/start",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t),credentials:"include"});if(console.log("[WebAuthn Service] Authentication options response status:",i.status),!i.ok){let e=await i.text();console.error("[WebAuthn Service] Failed to get authentication options:",{status:i.status,statusText:i.statusText,error:e});let t="Failed to get authentication options";try{t=JSON.parse(e).message||t}catch{t=e||t}throw Error(t)}let n=await i.json();if(console.log("[WebAuthn Service] Authentication options response data:",n),!n.success||!n.data?.options)throw console.error("[WebAuthn Service] Invalid authentication options response format:",n),Error("Invalid authentication options response format");let a=n.data.options;console.log("[WebAuthn Service] Got authentication options from backend:",{rpId:a.rpId,userVerification:a.userVerification,timeout:a.timeout,challengeLength:a.challenge?.length,allowCredentialsCount:a.allowCredentials?.length||0,biometricRequired:n.data.biometricRequired}),console.log("[WebAuthn Service] Step 2: Starting real biometric authentication..."),console.log("[WebAuthn Service] About to call startAuthentication() - BIOMETRIC PROMPT WILL APPEAR"),console.log("[WebAuthn Service] Authentication options being passed to startAuthentication:",JSON.stringify(a,null,2));let s=await (0,o.Fb)((0,r.oz)(a),o.LS.WEBAUTHN_OPERATION,"Biometric authentication timed out. Please try again.","webauthn-authentication");console.log("[WebAuthn Service] startAuthentication() completed successfully!"),console.log("[WebAuthn Service] Real biometric authentication completed:",{credentialId:s.id,type:s.type,rawIdLength:s.rawId?.length,responseType:s.response?.constructor?.name||"unknown",authenticatorDataLength:s.response?.authenticatorData?.length,clientDataJSONLength:s.response?.clientDataJSON?.length,signatureLength:s.response?.signature?.length,userHandleLength:s.response?.userHandle?.length||0,timestamp:new Date().toISOString()}),console.log("[WebAuthn Service] Step 3: Sending credential to backend for verification...");let c={credential:s,email:e.email};console.log("[WebAuthn Service] Authentication verification request body structure:",{hasCredential:!!c.credential,credentialId:c.credential?.id,credentialType:c.credential?.type,email:c.email});let l=await fetch("/api/webauthn/authenticate/complete",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(c),credentials:"include"});if(console.log("[WebAuthn Service] Authentication verification response status:",l.status),!l.ok){let e=await l.text();console.error("[WebAuthn Service] Authentication verification failed:",{status:l.status,statusText:l.statusText,error:e});let t="Failed to verify authentication";try{t=JSON.parse(e).message||t}catch{t=e||t}throw Error(t)}let u=await l.json();if(console.log("[WebAuthn Service] Authentication verification response:",u),console.log("[WebAuthn Service] Authentication verification completed:",{success:u.success,verified:u.data?.verified,biometricVerified:u.data?.biometricVerified,authenticatorType:u.data?.authenticatorType,biometricUsed:u.data?.biometricUsed,userId:u.data?.user?.id,userName:u.data?.user?.name}),!u.success||!u.data?.verified){let e=u.message||"Authentication verification failed";throw console.error("[WebAuthn Service] Authentication verification unsuccessful:",{success:u.success,verified:u.data?.verified,message:u.message}),Error(e)}return{...s}}catch(t){console.error("[WebAuthn Service] Real authentication error details:",{name:t?.name,message:t?.message,code:t?.code,stack:t?.stack,isTimeoutError:(0,o.q4)(t),type:typeof t,stringified:String(t)});let e=this.handleWebAuthnError(t);throw console.error("[WebAuthn Service] Processed authentication error:",e),Error(e.message)}}static validateBiometricAuthentication(e,t){return e&&e.userVerified?{isValid:!0}:{isValid:!1,reason:"User verification not performed - biometric authentication required"}}static analyzeBiometricAuthentication(e,t){return{userVerified:e?.userVerified||!1,userPresent:e?.userPresent||!1,deviceType:t?.isMobile?"mobile":"desktop",platformInfo:t||{}}}static logBiometricAuthenticationResult(e,t,i){console.log("[WebAuthn Service] Biometric authentication completed:",{userId:t,success:i?.verified||!1,userVerified:e?.userVerified||!1,deviceType:e?.deviceType||"unknown",timestamp:new Date().toISOString()})}static getBiometricTypeName(e){return e.biometricTypes.includes("face")?e.deviceInfo.isIOS?"Face ID":"Face Recognition":e.biometricTypes.includes("fingerprint")?e.deviceInfo.isIOS?"Touch ID":e.deviceInfo.isWindows?"Windows Hello":"Fingerprint":e.deviceInfo.isWindows&&e.isPlatformAuthenticatorAvailable?"Windows Hello":"Biometric Authentication"}static getBiometricIcon(e){return e.biometricTypes.includes("face")?"\uD83D\uDC64":e.biometricTypes.includes("fingerprint")?"\uD83D\uDC46":e.deviceInfo.isMobile?"\uD83D\uDCF1":e.deviceInfo.isWindows?"\uD83D\uDD10":"\uD83D\uDEE1️"}static async getDebugInfo(){let e={timestamp:new Date().toISOString(),environment:{userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A",language:"undefined"!=typeof navigator?navigator.language:"N/A",cookieEnabled:"undefined"!=typeof navigator&&navigator.cookieEnabled,onLine:"undefined"!=typeof navigator&&navigator.onLine,platform:"undefined"!=typeof navigator?navigator.platform:"N/A"},location:{origin:"N/A",protocol:"N/A",hostname:"N/A",port:"N/A"},webauthn:{isSupported:!1,isUserVerifyingPlatformAuthenticatorAvailable:!1,isConditionalMediationAvailable:!1},capabilities:null,errors:[]};try{try{e.capabilities=await this.checkBrowserCapabilities()}catch(t){e.errors.push(`Capabilities check failed: ${t}`)}}catch(t){e.errors.push(`General debug info collection failed: ${t}`)}return console.log("[WebAuthn Service] COMPLETE DEBUG INFO:",e),e}static async testWebAuthnSupport(){console.log("[WebAuthn Service] TESTING WEBAUTHN SUPPORT...");let e=[],t=[],i=!0;i=!1,e.push("WebAuthn API not available"),t.push("Use a modern browser that supports WebAuthn (Chrome 67+, Firefox 60+, Safari 14+)"),"undefined"==typeof navigator||navigator.onLine||(e.push("Device appears to be offline"),t.push("Check internet connection"));let o={supported:i,issues:e,recommendations:t};return console.log("[WebAuthn Service] WEBAUTHN SUPPORT TEST RESULTS:",o),o}static shouldAllowCrossPlatformFallback(e){return!e.isPlatformAuthenticatorAvailable}static getRegistrationOptionsWithFallback(e){return this.shouldAllowCrossPlatformFallback(e)?(console.log("[WebAuthn Service] Platform authenticator not available, allowing cross-platform fallback"),{authenticatorSelection:{requireResidentKey:!1,userVerification:"preferred"}}):{authenticatorSelection:{authenticatorAttachment:"platform",requireResidentKey:!1,userVerification:"preferred"}}}static logWebAuthnConfiguration(){console.log("[WebAuthn Service] CONFIGURATION DEBUG:",{hostname:"N/A",protocol:"N/A",port:"N/A",origin:"N/A",rpIdWillBe:"N/A",isLocalhost:!1,isHTTPS:!1,userAgent:"undefined"!=typeof navigator?navigator.userAgent:"N/A"})}}},36848:(e,t,i)=>{i.d(t,{Fb:()=>r,LS:()=>a,Oo:()=>s,ld:()=>l,q4:()=>c});class o extends Error{constructor(e,t,i){super(e),this.operation=t,this.timeout=i,this.name="TimeoutError",this.isTimeout=!0,Object.setPrototypeOf(this,o.prototype)}}function r(e,t,i,r="operation"){return new Promise((n,a)=>{let s=setTimeout(()=>{a(new o(i,r,t))},t);e.then(e=>{clearTimeout(s),n(e)}).catch(e=>{clearTimeout(s),a(e)})})}class n{constructor(e,t){this.callback=e,this.delay=t,this.timeoutId=null,this.cancelled=!1}start(){this.cancelled||(this.timeoutId=setTimeout(()=>{this.cancelled||this.callback()},this.delay))}cancel(){this.cancelled=!0,this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null)}get isCancelled(){return this.cancelled}}let a={CAMERA_INIT:5e3,WEBAUTHN_OPERATION:3e4,FACE_DETECTION:1e4,API_CALL:1e4,ANIMATION:2e3,QUICK_OPERATION:3e3,LONG_OPERATION:6e4,TAKING_LONGER_THRESHOLD:3e3};class s{constructor(e,t,i){this.onTakingLonger=e,this.onProgress=t,this.onCancel=i,this.abortController=null,this.takingLongerTimeout=null,this.progressAnimation=null}async execute(e,t,i,o="operation"){this.abortController=new AbortController,this.takingLongerTimeout=new n(this.onTakingLonger,a.TAKING_LONGER_THRESHOLD),this.takingLongerTimeout.start(),this.onProgress&&(this.progressAnimation=function(e,t,i){let o;let r=Date.now(),a=()=>{if(i?.aborted)return;let n=Math.min((Date.now()-r)/e*100,100);t(n),n<100&&(o=requestAnimationFrame(a))};return o=requestAnimationFrame(a),new n(()=>{o&&cancelAnimationFrame(o)},e)}(t,this.onProgress,this.abortController.signal));try{return await function(e,t,i,o,n="operation"){var a;return a=r(e,t,i,n),o?new Promise((e,t)=>{if(o.aborted){t(Error("Operation was aborted"));return}let i=()=>{t(Error("Operation was aborted"))};o.addEventListener("abort",i),a.then(e,t).finally(()=>{o.removeEventListener("abort",i)})}):a}(e(),t,i,this.abortController.signal,o)}finally{this.cleanup()}}cancel(){this.abortController&&this.abortController.abort(),this.onCancel?.(),this.cleanup()}cleanup(){this.takingLongerTimeout?.cancel(),this.progressAnimation?.cancel(),this.abortController=null,this.takingLongerTimeout=null,this.progressAnimation=null}}function c(e){return e instanceof o||e?.name==="TimeoutError"||e?.isTimeout===!0}function l(e,t){return`${e} is taking longer than expected (${Math.round(t/1e3)}s). You can cancel or wait for it to complete.`}}};